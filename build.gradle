import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'http://files.minecraftforge.net/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'groovy'
    id 'net.linguica.maven-settings' version '0.5'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
apply plugin: 'maven-publish'

repositories {
    maven {
        name = 'ftp.satyrn.dev'
        url = 'sftp://ftp.satyrn.dev/maven'
    }
}

def config = null

file "${projectDir.getAbsolutePath()}/config.json" withReader {
    config = new JsonSlurper().parseText(it.text)
}

version = "${config.minecraft.version}-${config.version.major}.${config.version.minor}.${config.version.patch}"
group = 'dev.satyrn.wolfarmor.api'
archivesBaseName = 'wolfarmor-api'

def reobfFile = file("$buildDir/libs/$archivesBaseName-${version}.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            credentials {
                username project.getProperties()['maven.username']
                password project.getProperties()['maven.password']
            }
            url 'sftp://ftp.satyrn.dev:22/maven'
        }
    }
}

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    doFirst {
        copy {
            from sourceSets.main.allJava
            into "$buildDir/generated/main/java"
            expand version: version, mcversion: config.minecraft.version, modname: config.name, modid: config.modid
        }
        copy {
            from "$buildDir/generated/main/java"
            into "$buildDir/sources/main/java"
        }
    }
}

sourceSets.main {
    java {
        srcDirs 'src/main/java'
    }
}

sourceSets.test {
    dependencies {
        testCompile 'org.codehaus.groovy:groovy-all:2.5.7'
        testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
        testCompile 'junit:junit:4.12'
        testRuntime 'org.objenesis:objenesis:2.6'
        testRuntime 'net.bytebuddy:byte-buddy:1.9.3'
    }
    java {
        srcDirs 'src/test/groovy'
    }
}

runClient.enabled = false
runServer.enabled = false

processResources {
    // copy LICENSE
    from('/') {
        include 'LICENSE'
        include 'THIRDPARTY'
    }
}


minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"
    mappings = config.mcp.version
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Wolf Armor API",
            "Specification-Vendor": "Isabel Maskrey",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Isabel Maskrey",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourceJar(type: Jar, overwrite: true) {
    dependsOn processResources
    from "$buildDir/generated/main/java"
    from processResources.outputs
    archiveName = "$archivesBaseName-$version-sources.jar"
}

task saveConfig {
    doLast {
        def configFile = new File("${projectDir.getAbsolutePath()}/config.json")
        configFile.delete()
        configFile.write(new JsonBuilder(config).toPrettyString())
    }
}

def VERSIONING_GROUP = 'Versioning'
def SCM_GROUP = 'Source Control'

task versionPatch {
    group VERSIONING_GROUP
    dependsOn 'apiGitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'apiGitAddConfig'
    finalizedBy 'apiGitTagVersion'
    finalizedBy 'apiGitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (apiGitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            apiGitAddConfig.enabled = false
            apiGitTagVersion.enabled = false
            apiGitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch += 1
        }
    }
}

task versionMinor {
    group VERSIONING_GROUP
    dependsOn 'apiGitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'apiGitAddConfig'
    finalizedBy 'apiGitTagVersion'
    finalizedBy 'apiGitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (apiGitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            apiGitAddConfig.enabled = false
            apiGitTagVersion.enabled = false
            apiGitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch = 0
            config.version.minor += 1
        }
    }
}

task versionMajor {
    group VERSIONING_GROUP
    dependsOn 'apiGitCheckWorkingTree'
    finalizedBy 'saveConfig'
    finalizedBy 'apiGitAddConfig'
    finalizedBy 'apiGitTagVersion'
    finalizedBy 'apiGitCommit'
    finalizedBy 'reportVersionChange'

    doLast {
        println projectDir.getAbsolutePath()
        if (apiGitCheckWorkingTree.output() != "") {
            saveConfig.enabled = false
            apiGitAddConfig.enabled = false
            apiGitTagVersion.enabled = false
            apiGitCommit.enabled = false
            throw new Error("Working directory not clean!")
        } else {
            config.version.patch = 0
            config.version.minor = 0
            config.version.major += 1
        }
    }
}

task apiGitCheckWorkingTree(type:Exec) {
    group SCM_GROUP
    workingDir projectDir.getAbsolutePath()
    executable 'git'
    args '--no-pager', 'diff', 'HEAD'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task apiGitAddConfig() {
    group SCM_GROUP
    shouldRunAfter saveConfig
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            ignoreExitValue true
            executable 'git'
            args 'add', 'config.json'
        }
    }
}

task apiGitCommit() {
    group SCM_GROUP
    shouldRunAfter apiGitAddConfig
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            def newVersionNum = "v${config.version.major}.${config.version.minor}.${config.version.patch}"
            ignoreExitValue true
            executable 'git'
            args 'commit', '-m', "\"üè∑ ${newVersionNum}\""
        }
    }
}

task apiGitTagVersion() {
    group SCM_GROUP
    shouldRunAfter apiGitCommit
    doLast {
        exec {
            workingDir projectDir.getAbsolutePath()
            def newVersionNum = "v${config.version.major}.${config.version.minor}.${config.version.patch}"
            ignoreExitValue true
            executable 'git'
            args 'tag', '-a', "${newVersionNum}", '-m', "\"${newVersionNum}\""
        }
    }
}

task reportVersionChange {
    group VERSIONING_GROUP
    shouldRunAfter apiGitCommit
    doLast {
        println "Current semver: ${config.version.major}.${config.version.minor}.${config.version.patch}"
    }
}
